error_log logs/error.log debug;

events { }

http {
    proxy_cache_path cache/  keys_zone=auth_cache:10m;
    proxy_headers_hash_max_size 512;
    proxy_headers_hash_bucket_size 128;

    upstream auth-backend {
        server 127.0.0.1:8080;
    }

    server {
        listen 80;

        location / {
            auth_request /auth-proxy;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host            $http_host;

            # 认证后端使用了XSRF过滤，使用Nginx内部重定向会导致XSRF验证失效，
            # 因为，登录页面Get请求是由Nginx完成的，但Post请求是客户端完成的，这两个HTTP请求会分别分配给两个不同beego.Controller实例来处理，
            # 又因为XSRF Token保存在beego.Controller实例中随机生成的，所以Get和Post请求对应的XSRF Token不一样导致校验失败，
            # 因此，这里需要使用named location，在named location返回一个302响应，全部由客户端进行重定向和处理XSRF
	        error_page 401 =200 @error401;
        }

        location @error401 {
            # 302跳转后，无法获取到之前的uri来设置X-Target头，因此，在302跳转的url加上target参数以达到相同效果
            return 302  /passport/login?target=$request_uri;
        }

        location = /auth-proxy {
            internal;

            proxy_pass http://auth-backend/auth-proxy;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-CookieName "SessionID";
            proxy_set_header Cookie SessionID=$cookie_SessionID;

            proxy_cache auth_cache;
            proxy_cache_valid 200 10m;
            proxy_cache_key "$http_authorization$cookie_SessionID";
        }

        location /passport/login {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host            $http_host;
            # proxy_set_header X-Target $request_uri;  # target通过url地址参数target来设置
            proxy_pass http://auth-backend/passport/login;
        }

        location /passport/logout {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host            $http_host;
            proxy_pass http://auth-backend/passport/logout;
        }

        location /captcha {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host            $http_host;
            proxy_pass http://auth-backend/captcha;
        }

        location /favicon.ico {
            alias /var/www/site/assets/img/favicon.ico;
            proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
        }

        location /static {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host            $http_host;
            proxy_pass http://auth-backend/static;
        }
    }
}
